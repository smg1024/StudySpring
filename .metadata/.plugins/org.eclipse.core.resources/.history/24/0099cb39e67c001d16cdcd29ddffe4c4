package com.poby.myapp.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.poby.myapp.service.DataService;
import com.poby.myapp.vo.DataVO;

@Controller
public class DataController {
	@Autowired
	DataService service;
	
	// 게시판 목록
	@RequestMapping("/data/dataList")
	public String dataList(Model model) {
		// 자료실 데이터 선택
		
		return "data/dataList";
	}
	
	// 자료 올리기 form
	@GetMapping("/data/dataPost")
	public String dataPost() {
		return "data/dataPost";
	}
	
	// 자료 올리기 페이지
	@PostMapping("/data/dataPostOk")
	public ModelAndView dataPostOk(HttpServletRequest req, DataVO vo) {
		// HttpServletRequest객체를 이용하여 form의 값과 파일객체를 서버로 가져온다
		ModelAndView mav = new ModelAndView();
		
		// 작성자
		vo.setUsername((String)req.getSession().getAttribute("logUsername"));
		
		// 파일 업로드
		String path = req.getSession().getServletContext().getRealPath("/upload");
		
		// req객체를 이용하여 MultipartHttpServletRequest객체를 생성하여 파일 업로드를 처리한다
		// MultipartHttpServletRequest객체에는 파일 수 만큼 MultipartFile객체가 존재한다
		MultipartHttpServletRequest mr = (MultipartHttpServletRequest)req;
		
		// mr에서 MultipartFile객체를 구해온다
		List<MultipartFile> fileList = mr.getFiles("filename");
		
		// 첨부한 파일이 있을 때---------------------------------------------
		// 업로드한 파일명을 보관할 변수
		List<String> filenameList = new ArrayList<String>();
		if(fileList!=null) {
			// 첨부파일의 개수만큼 반복한다************************************
			for(int i=0; i<fileList.size(); i++) {
				MultipartFile mf = fileList.get(i);	// List에서 파일얻어오기
				String file = mf.getOriginalFilename();	// 업로드 시 선택한 원래파일명 얻어오기
				
				// 서버에 filename이 없으면 그대로 업로드하고, 있으면 새로운 파일명 생성한다
				if(file!=null && !file.equals("")) {	// 원래 파일명이 존재하면
					File f = new File(path, file);
					if(f.exists()) {	// 파일이 존재하는지 알려준다 -> true:있다, false:없다
						// 같은 이름의 파일이 있음 -> 파일명 변경 : file(1).txt
						for(int renameNum=1;;renameNum++) {
							int dot = file.lastIndexOf(".");	// 파일명, 확장자 분리
							String filename = file.substring(0, dot);	// 파일명
							String extension = file.substring(dot+1);	// 확장자
							
							// 새로운 파일명
							String newFile = filename+"("+renameNum+")"+extension;
							f = new File(path, newFile);
							
							// 기존 파일 중 새로운 파일명과 같은 파일이 없으면 반복문 중단
							if(!f.exists()) {
								file = newFile;
								break;
							}
						}
						
					}
					// 업로드하기
					try {
						mf.transferTo(new File(path, file));
					}catch(IOException e) {
						System.out.println("파일 업로드 예외발생");
						e.getMessage();
					}
					// 업로드한 파일명(원래파일명 or 새로운 파일명)
					filenameList.add(file);
				}
				
			}// *********************************************************
			
			// 업로드한 파일명을 vo의 filename1, filename2에 set한다
			vo.setFilename1(filenameList.get(0));
			if(filenameList.size()==2) vo.setFilename2(filenameList.get(1));
		}//---------------------------------------------------------
		
		// DB에 레코드 추가
		
		
		
		return mav;
	}
}
