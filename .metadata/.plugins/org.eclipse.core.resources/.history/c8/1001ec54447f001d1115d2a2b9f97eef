package com.poby.myapp.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.poby.myapp.service.DataService;
import com.poby.myapp.vo.DataVO;

@Controller
public class DataController {
	@Autowired
	DataService service;
	
	// 게시판 목록
	@RequestMapping("/data/dataList")
	public String dataList(Model model) {
		// 자료실 데이터 선택
		model.addAttribute("list", service.dataList());
		
		return "data/dataList";
	}
	
	// 자료 올리기 form
	@GetMapping("/data/dataPost")
	public String dataPost() {
		return "data/dataPost";
	}
	
	// 자료 올리기 페이지
	@PostMapping("/data/dataPostOk")
	public ModelAndView dataPostOk(HttpServletRequest req, DataVO vo) {
		// HttpServletRequest객체를 이용하여 form의 값과 파일객체를 서버로 가져온다
		ModelAndView mav = new ModelAndView();
		
		// 작성자
		vo.setUsername((String)req.getSession().getAttribute("logUsername"));
		
		// 파일 업로드 경로
		String path = req.getSession().getServletContext().getRealPath("/upload");
		
		// req객체를 이용하여 MultipartHttpServletRequest객체를 생성하여 파일 업로드를 처리한다
		// MultipartHttpServletRequest객체에는 파일 수 만큼 MultipartFile객체가 존재한다
		MultipartHttpServletRequest mr = (MultipartHttpServletRequest)req;
		
		// mr에서 MultipartFile객체를 구해온다
		List<MultipartFile> fileList = mr.getFiles("filename");
		
		// 첨부한 파일이 있을 때---------------------------------------------
		// 업로드한 파일명을 보관할 변수
		List<String> filenameList = new ArrayList<String>();
		if(fileList!=null) {
			// 첨부파일의 개수만큼 반복한다************************************
			for(int i=0; i<fileList.size(); i++) {
				MultipartFile mf = fileList.get(i);	// List에서 파일얻어오기
				String file = mf.getOriginalFilename();	// 업로드 시 선택한 원래파일명 얻어오기
				
				// 서버에 file이 없으면 그대로 업로드하고, 있으면 새로운 파일명 생성한다
				if(file!=null && !file.equals("")) {	// 원래 파일명이 존재하면
					File f = new File(path, file);
					if(f.exists()) {	// 파일이 존재하는지 알려준다 -> true:있다, false:없다
						// 같은 이름의 파일이 있음 -> 파일명 변경 : file(1).txt
						for(int renameNum=1;;renameNum++) {
							int dot = file.lastIndexOf(".");	// 파일명, 확장자 분리
							String filename = file.substring(0, dot);	// 파일명
							String extension = file.substring(dot+1);	// 확장자
							
							// 새로운 파일명
							String newFilename = filename+"("+renameNum+")."+extension;
							f = new File(path, newFilename);
							
							// 기존 파일 중 새로운 파일명과 같은 파일이 없으면 반복문 중단
							if(!f.exists()) {
								file = newFilename;
								break;
							}
						}
						
					}
					// 업로드하기
					try {
						mf.transferTo(new File(path, file));
					}catch(IOException e) {
						System.out.println("파일 업로드 예외발생");
						e.getMessage();
					}
					// 업로드한 파일명(원래파일명 or 새로운 파일명)
					filenameList.add(file);
				}
				
			}// *********************************************************
			
			// 업로드한 파일명을 vo의 filename1, filename2에 set한다
			vo.setFilename1(filenameList.get(0));
			if(filenameList.size()==2) vo.setFilename2(filenameList.get(1));
		}//---------------------------------------------------------
		System.out.println("f1 ->" + vo.getFilename1());
		System.out.println("f2 ->" + vo.getFilename2());
		
		// DB에 파일 정보 추가
		int result = service.dataPostOk(vo);
		
		// 추가 실패하면 이미 업로드된 파일을 삭제해야한다
		if(result==0) {
			for(int i=0; i<filenameList.size(); i++) {
				File delFile = new File(path, filenameList.get(i));
				delFile.delete();
			}
			mav.setViewName("data/dataPostOk");
		}else {
			mav.setViewName("redirect:dataList");
		}
		
		return mav;
	}
	
	// 글 보기
	@GetMapping("/data/dataView")
	public ModelAndView dataView(int postno) {
		ModelAndView mav = new ModelAndView();
		
		mav.addObject("vo", service.dataView(postno));
		mav.setViewName("data/dataView");
		
		return mav;
	}
	
	// 글 수정
	@GetMapping("/data/dataEdit")
	public ModelAndView dataEdit(int postno) {
		ModelAndView mav = new ModelAndView();
		DataVO vo = service.dataView(postno);
		
		// 첨부파일 수
		int filecnt = 0;
		if(vo.getFilename1()!=null) filecnt++;
		if(vo.getFilename2()!=null) filecnt++;
		
		mav.addObject("filecnt", filecnt);
		mav.addObject("vo", vo);
		mav.setViewName("data/dataEdit");
		
		return mav;
	}
	
	// 글 수정 올리기 페이지
	@PostMapping("/data/dataEditOk")
	public ModelAndView dataEditOk(HttpServletRequest req, DataVO vo) {
		ModelAndView mav = new ModelAndView();
		
		vo.setUsername((String)req.getSession().getAttribute("logUsername"));
		
		// 업로드 파일 위치, 파일 삭제 위치
		String path = req.getSession().getServletContext().getRealPath("/upload");
		
		// 파일 업로드 처리를 해줄 MultipartHttpServletRequest객체 생성
		MultipartHttpServletRequest mr = (MultipartHttpServletRequest) req;
		
		// DB에 등록되어 있는 수정 전 파일명 
		DataVO dbVO = service.selectFilename(vo.getPostno());
		
		// DB파일명, 삭제파일명, 새로 업로드한 파일명을 관리하기 위한 객체
		List<String> dbFile = new ArrayList<String>();
		
		// DB에서 읽어온 수정 전 파일명을 dbFile에 추가하기
		dbFile.add(dbVO.getFilename1());
		if(dbVO.getFilename2()!=null) dbFile.add(dbVO.getFilename2());
		
		// 수정 form에서 삭제할 파일을 dbFile에서 제거하기
		if(vo.getDelFile()!=null) {	// 삭제할 파일이 있으면
			for(String delFile : vo.getDelFile()) {
				// System.out.println("delFile -> " + delFile);
				dbFile.remove(delFile);
			}
		}
		
		//-------------------파일 업로드--------------------
		List<MultipartFile> fileList = mr.getFiles("filename");
		List<String> uploadFileList = new ArrayList<String>();	// 새로 업로드한 파일명 관리
		
		if(fileList!=null) {	// 업로드할 파일이 있을 때
			// 파일 수 만큼
			for(int i=0; i<fileList.size(); i++) {
				MultipartFile mf = fileList.get(i);
				String file = mf.getOriginalFilename();	// 업로드한 원래 파일명
				if(file!=null && !file.equals("")){
					File f = new File(path, file);
					
					if(f.exists()) {	// 이미 파일명 존재하면
						for(int renameNum=1;;renameNum++) {	// 번호매기기
							int dot = file.lastIndexOf(".");
							String filename = file.substring(0, dot);
							String extension = file.substring(dot+1);	// 파일명, 확장자 분리
							
							String newFilename = filename+"("+renameNum+")."+extension;
							f = new File(path, newFilename);
							
							if(!f.exists()) {
								file = newFilename;
								break;
							}
						}
					}
					
					// 실제 업로드(새로운 파일명으로 업로드)
					try {
						mf.transferTo(new File(path, file));
					}catch(Exception e) {
						e.printStackTrace();
					}
					
					// dbFile과 uploadFileList에 등록
					uploadFileList.add(file);
					dbFile.add(file);	// DB 업데이트 시 필요
				}
			}
		}//--------------------파일 업로드 끝---------------------
		// dbFile의 내용을 vo에 세팅
		for(int i=0; i<dbFile.size(); i++) {
			System.out.println("dbFile -> " + dbFile.get(i));
			if(i==0) vo.setFilename1(dbFile.get(i));
			if(i==1) vo.setFilename2(dbFile.get(i));
		}
		
		// DB 업데이트
		int result = service.dataEdit(vo);
		
		if(result>0){// 업데이트가 된 경우 -> 삭제파일이 있으면 지우기
			fileDelete(vo.getDelFile(), path);
		}else{// 업데이트가 실패한 경우 -> 새로 업로드한 파일 지우기
			fileDelete(uploadFileList, path);
		}
		
		mav.addObject("postno", vo.getPostno());
		mav.setViewName("redirect:dataEdit");
		
		return mav;
	}
	
	// 파일 삭제 메소드
	public void fileDelete(List<String> delFileList, String path) {
		if(delFileList!=null) {
			for(String file : delFileList) {
				File f = new File(path, file);
				f.delete();
			}
		}
	}
}
